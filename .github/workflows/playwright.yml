name: Playwright Tests

on:
  workflow_dispatch:
    inputs:
      spec:
        description: 'Select the spec to run (or All)'
        required: true
        type: choice
        default: 'example.spec.ts'
        options:
          - example.spec.ts
          - qaplayground.spec.ts
          - screener.spec.ts
          - playgroundIMG.spec.ts
          - All

jobs:
  suiteA:
    runs-on: ubuntu-latest
    if: github.event.inputs.spec == 'example.spec.ts' || github.event.inputs.spec == 'All'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit, edge]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npx playwright install
      - run: |
          npm install -g allure-commandline --save-dev
          npm install allure-single-html-file-js --save-dev
      - run: |
          npx playwright test tests/example.spec.ts --project=${{ matrix.browser }} --reporter=line,allure-playwright --output=playwright-report
        continue-on-error: true
      - run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report
        if: always()
      - run: |
          PASSED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.passed)")
          FAILED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.failed)")
          TOTAL=$(($PASSED + $FAILED))
          echo "${{ matrix.browser }}: $PASSED/$TOTAL" > results.txt
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-${{ matrix.browser }}-example
          path: |
            allure-results
            allure-report
            results.txt

  suiteB:
    runs-on: ubuntu-latest
    needs: suiteA
    if: github.event.inputs.spec == 'qaplayground.spec.ts' || github.event.inputs.spec == 'All'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit, edge]
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npx playwright install
      - run: |
          npm install -g allure-commandline --save-dev
          npm install allure-single-html-file-js --save-dev
      - run: |
          npx playwright test tests/qaplayground.spec.ts --project=${{ matrix.browser }} --reporter=line,allure-playwright --output=playwright-report
        continue-on-error: true
      - run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report
        if: always()
      - run: |
          PASSED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.passed)")
          FAILED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.failed)")
          TOTAL=$(($PASSED + $FAILED))
          echo "${{ matrix.browser }}: $PASSED/$TOTAL" > results.txt
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-${{ matrix.browser }}-qaplayground
          path: |
            allure-results
            allure-report
            results.txt

  suiteC:
    runs-on: ubuntu-latest
    needs: suiteA
    if: github.event.inputs.spec == 'screener.spec.ts' || github.event.inputs.spec == 'All'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit, edge]
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npx playwright install
      - run: |
          npm install -g allure-commandline --save-dev
          npm install allure-single-html-file-js --save-dev
      - run: |
          npx playwright test tests/screener.spec.ts --project=${{ matrix.browser }} --reporter=line,allure-playwright --output=playwright-report
        continue-on-error: true
      - run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report
        if: always()
      - run: |
          PASSED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.passed)")
          FAILED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.failed)")
          TOTAL=$(($PASSED + $FAILED))
          echo "${{ matrix.browser }}: $PASSED/$TOTAL" > results.txt
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-${{ matrix.browser }}-screener
          path: |
            allure-results
            allure-report
            results.txt

  suiteD:
    runs-on: ubuntu-latest
    needs: suiteB
    if: github.event.inputs.spec == 'playgroundIMG.spec.ts' || github.event.inputs.spec == 'All'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit, edge]
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npx playwright install
      - run: |
          npm install -g allure-commandline --save-dev
          npm install allure-single-html-file-js --save-dev
      - run: |
          npx playwright test tests/playgroundIMG.spec.ts --project=${{ matrix.browser }} --reporter=line,allure-playwright --output=playwright-report
        continue-on-error: true
      - run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report
        if: always()
      - run: |
          PASSED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.passed)")
          FAILED=$(node -e "let r=require('./allure-report/widgets/summary.json');console.log(r.statistic.failed)")
          TOTAL=$(($PASSED + $FAILED))
          echo "${{ matrix.browser }}: $PASSED/$TOTAL" > results.txt
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-${{ matrix.browser }}-playgroundIMG
          path: |
            allure-results
            allure-report
            results.txt

  select-browser:
    runs-on: ubuntu-latest
    needs: [suiteA, suiteB, suiteC, suiteD]
    if: github.event.inputs.spec == 'All'
    steps:
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Find browser with highest pass rate
        id: find_best
        run: |
          best_browser=""
          best_rate=0
          for file in ./artifacts/**/results.txt; do
            browser=$(basename $(dirname $file) | cut -d'-' -f2)
            PASS=$(cat $file | awk -F: '{print $2}' | awk -F'/' '{print $1}' | xargs)
            TOTAL=$(cat $file | awk -F'/' '{print $2}' | xargs)
            if [ "$TOTAL" -gt 0 ]; then
              rate=$(awk "BEGIN { printf \"%.4f\", $PASS/$TOTAL }")
              if (( $(echo "$rate > $best_rate" | bc -l) )); then
                best_rate=$rate
                best_browser=$browser
              fi
            fi
          done
          echo "Best browser: $best_browser"
          echo "best=$best_browser" >> $GITHUB_OUTPUT
          echo "rate=$(awk "BEGIN { printf \"%.2f\", $best_rate*100 }")" >> $GITHUB_OUTPUT

      - name: Copy best browser's report for final publication
        run: |
          REPORT_DIR="./artifacts/allure-${{ steps.find_best.outputs.best }}/allure-report"
          if [ -d "$REPORT_DIR" ]; then
            cp -r "$REPORT_DIR" ./allure-report
            echo "Successfully copied allure report from $REPORT_DIR"
          else
            echo "Error: Directory $REPORT_DIR does not exist"
            ls -l ./artifacts/allure-${{ steps.find_best.outputs.best }}
            echo "Available artifact directories:"
            ls -l ./artifacts
            exit 1
          fi

      - name: Install Allure CLI and single-file packager
        run: |
          npm install -g allure-commandline --save-dev
          npm install allure-single-html-file-js --save-dev

      - name: Combine into Single Allure HTML File
        run: |
          node ./node_modules/allure-single-html-file-js/combine.js allure-report
          mv allure-report/complete.html allure-report.html
          echo "âœ… Combined Allure HTML generated: allure-report.html"

      - name: Upload Single Allure HTML File
        uses: actions/upload-artifact@v4
        with:
          name: Allure-Report-Single-File
          path: allure-report.html

      - name: Add summary with pass rate
        run: |
          echo "Uploaded report from **${{ steps.find_best.outputs.best }}** browser" >> $GITHUB_STEP_SUMMARY
          echo "Pass Percentage: **${{ steps.find_best.outputs.rate }}%**" >> $GITHUB_STEP_SUMMARY
